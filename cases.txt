# Minishell Test Suite - Pipes, Redirections & Heredocs

## Basic Output Redirection Tests

### Test 1: Simple output redirection 
```bash
echo "Hello World" > test1.txt
cat test1.txt
# Expected: test1.txt should contain "Hello World"
```

### Test 2: Output redirection with builtin
```bash
pwd > current_dir.txt
cat current_dir.txt
# Expected: current_dir.txt should contain your current directory path
```

### Test 3: Append redirection
```bash
echo "Line 1" > append_test.txt
echo "Line 2" >> append_test.txt
echo "Line 3" >> append_test.txt
cat append_test.txt
# Expected: File should contain all three lines
```

### Test 4: Overwrite vs append
```bash
echo "First content" > overwrite_test.txt
cat overwrite_test.txt
echo "Second content" > overwrite_test.txt
cat overwrite_test.txt
# Expected: Only "Second content" should remain
```

## Input Redirection Tests

### Test 5: Simple input redirection
```bash
echo "test input content" > input_test.txt
cat < input_test.txt
# Expected: Should display "test input content"
```

### Test 6: Input redirection with wc
```bash
echo -e "line1\nline2\nline3" > lines.txt
wc -l < lines.txt
# Expected: Should show line count
```

## Heredoc Tests

### Test 7: Basic heredoc
```bash
cat << EOF
This is line 1
This is line 2
This is line 3
EOF
# Expected: Should display all three lines
```

### Test 8: Heredoc with redirection
```bash
cat << END > heredoc_output.txt
Heredoc content line 1
Heredoc content line 2
END
cat heredoc_output.txt
# Expected: File should contain the heredoc content
```

### Test 9: Heredoc with different delimiter
```bash
cat << STOP
Testing different delimiter
Another line
STOP
# Expected: Should display both lines
```

### Test 10: Heredoc with spaces in delimiter (edge case)
```bash
wc -l << "END OF INPUT"
line one
line two  
line three
END OF INPUT
# Expected: Should count 3 lines
```

## Basic Pipe Tests

### Test 11: Simple pipe
```bash
echo "hello world" | cat
# Expected: Should display "hello world"
```

### Test 12: Pipe with wc
```bash
echo -e "line1\nline2\nline3" | wc -l
# Expected: Should show 3
```

### Test 13: Multiple word pipe
```bash
echo "one two three four five" | wc -w
# Expected: Should show 5
```

### Test 14: Pipe with grep
```bash
echo -e "apple\nbanana\ncherry\napricot" | grep "ap"
# Expected: Should show "apple" and "apricot"
```

## Complex Pipe Tests

### Test 15: Two-stage pipe
```bash
echo -e "hello\nworld\nhello\nagain" | grep "hello" | wc -l
# Expected: Should show 2
```

### Test 16: Three-stage pipe
```bash
echo -e "cat\ndog\nbird\ncat\nfish" | grep -v "cat" | wc -l
# Expected: Should show 3 (dog, bird, fish)
```

### Test 17: Pipe with sort
```bash
echo -e "zebra\napple\nbanana\ncherry" | sort
# Expected: Should display in alphabetical order
```

## Combined Redirections and Pipes

### Test 18: Pipe with output redirection
```bash
echo -e "line1\nline2\nline3" | wc -l > pipe_output.txt
cat pipe_output.txt
# Expected: File should contain the line count
```

### Test 19: Input redirection with pipe
```bash
echo -e "test\ncontent\nfor\npipe" > pipe_input.txt
cat < pipe_input.txt | wc -w
# Expected: Should show word count
```

### Test 20: Heredoc with pipe
```bash
cat << EOF | grep "important"
This is a test
This line is important
Another test line
This is also important
EOF
# Expected: Should show the two "important" lines
```

### Test 21: Complex combination
```bash
cat << DATA | grep "test" | wc -l > complex_result.txt
test line 1
normal line
test line 2  
another normal line
test line 3
DATA
cat complex_result.txt
# Expected: File should contain "3"
```



















## Error Handling Tests

### Test 22: Redirection to non-existent directory
```bash
echo "test" > /nonexistent/file.txt
# Expected: Should show permission/directory error 
```

### Test 23: Input from non-existent file
```bash
cat < nonexistent_file.txt
# Expected: Should show "No such file or directory" error   // cat behavior aam temshe
```

### Test 24: Pipe with non-existent command
```bash
echo "test" | nonexistentcommand
# Expected: Should show "command not found" error    //zabta
```

## Multiple Redirections Tests

### Test 25: Multiple input redirections (last one wins)
```bash
echo "content1" > file1.txt
echo "content2" > file2.txt
cat < file1.txt < file2.txt
# Expected: Should read from file2.txt (last redirection)             //bas ghayir permission chmod 000 la wahde w hat l be2e hada bi siro corrupted? until nghayir permission again 
```

### Test 26: Multiple output redirections (last one wins)
```bash
echo "test content" > first.txt > second.txt
cat first.txt
cat second.txt
# Expected: first.txt should be empty, second.txt should have content
```

### Test 27: Mixed redirections
```bash
echo "input content" > mixed_input.txt
cat < mixed_input.txt > mixed_output.txt
cat mixed_output.txt
# Expected: mixed_output.txt should contain "input content"
```

## Builtin Commands with Redirections

### Test 28: Export with redirection
```bash
export TEST_VAR="test_value"
export > export_output.txt
grep "TEST_VAR" export_output.txt
# Expected: Should find TEST_VAR in the output
```

### Test 29: Env with redirection
```bash
env > env_output.txt
wc -l env_output.txt
# Expected: Should show number of environment variables
```

### Test 30: Echo with pipes and redirections
```bash
echo "test" | cat > echo_pipe_test.txt
cat echo_pipe_test.txt
# Expected: File should contain "test"
```

minihell> echo "test content" > first.txt > second.txt
minihell> cat first.txt
minihell> cat second.txt
test content
minihell> chmod 000 second.txt
minihell> echo "test content" > first.txt > second.txt > third.txt
second.txt: Permission denied
minihell> khala2 l telit bas ma lezim // !!zabatit!!



minihell> minihell> cat >> p | cat < p
hello
world
^C





minihell> cat <<'<' p
> ihdsa
> p
> < p
> '<' p
>  p
> '<' p
> "'<' p"
> ^C
>
hello
world
minihell>



#Redirections
ls > output.txt
cat < input.txt
ls >> output.txt
cat < input.txt > output.txt

ls > /dev/null (3ena 3atit permission denied)

cat < /dev/null
ls > /nonexistent/dir/file.txt
#Multiple Pipes
ls | grep .c | wc -l
cat file.txt | grep "pattern" | sort | uniq
ls | grep .c | xargs cat | wc -l
ps aux | grep bash | awk '{print $2}'
#Expansions
echo $HOME
echo $USER:$HOME - Multiple environment variables
echo "Hello $USER" - Environment variable in quoted string
echo 'Hello $USER' - No expansion in single quotes
echo "Hello \$USER" - Escaped variable
#Combined Tests
ls | grep .c > output.txt
cat < input.txt | grep "pattern" > output.txt
ls | grep .c | wc -l > count.txt
cat < input.txt | grep "pattern" | sort | uniq > output.txt
echo $PATH | tr ':' '\n' | sort > sorted_path.txt
echo "Current user: $USER" > user.txt
cat < /dev/null | grep "pattern" > output.txt
cat < input.txt | grep "pattern" | sort -r > output.txt | wc -l
echo "test" | grep "t" > grep1.txt > grep2.txt
cat file.txt | grep "pattern" | wc -l > count1.txt > count2.txt
ls -la | grep "txt" > txt_files1.txt | wc -l > count.txt
cat < input.txt | grep "pattern" > output1.txt | wc -l > output2.txt
echo "hello" > file1.txt | cat file1.txt > file2.txt | cat file2.txt > file3.txt
ls -la > ls.txt | grep "txt" > grep.txt | sort -r > sort.txt
echo "hello" > file1.txt > nonexistent_directory/file2.txt > file3.txt
cat < nonexistent.txt
echo "Test" > /root/test.txt
echo "hello" > file1.txt > file2.txt > file3.txt
echo $HOME > home1.txt > home2.txt > home3.txt
ls -la > ls1.txt > ls2.txt > ls3.txt
cat < file1.txt < file2.txt < file3.txt
cat < input.txt > output1.txt > output2.txt
cat file.txt | grep "pattern" | wc -l > count1.txt > count2.txt
ls -la | grep "txt" > txt_files1.txt | wc -l > count.txt


cat < input.txt | grep "pattern" > output1.txt | wc -l > output2.txt
echo "hello" > file1.txt | cat file1.txt > file2.txt | cat file2.txt > file3.txt
ls -la > ls.txt | grep "txt" > grep.txt | sort -r > sort.txt
cat < input.txt | grep "pattern" | sort -r > output.txt | wc -l


#Edge Cases
> input.txt
ls | > output.txt
ls > output.txt | grep .c
ls | grep .c < input.txt
echo $NONEXISTENT_VAR


echo "Test" > file1.txt > file2.txt
cat file1.txt
cat file2.txt


echo "First" > file1.txt
echo "Second" > file2.txt
cat < file1.txt < file2.txt
echo "Hello" > input.txt
cat < input.txt > output.txt
cat output.txt


echo "Line 1" > append.txt
echo "Line 2" >> append.txt
echo "Line 3" >> append.txt
cat append.txt



echo "First" > mixed.txt
echo "Second" >> mixed.txt
echo "Third" > mixed.txt
cat mixed.txt



echo "Hello World" | grep "Hello" > hello.txt
echo "Goodbye World" | grep "Goodbye" >> hello.txt
cat hello.txt
echo "Line 1" > chain1.txt
echo "Line 2" >> chain1.txt
cat < chain1.txt | grep "Line" > chain2.txt
cat chain2.txt


echo $HOME > home.txt
echo $PATH >> home.txt
cat home.txt
echo "Hello > World" > special.txt
echo "Hello >> World" >> special.txt
cat special.txt


echo 'Hello "World"' > quotes.txt
echo "Hello 'World'" >> quotes.txt
cat quotes.txt
cat < nonexistent.txt > output.txt



echo "test" > /root/forbidden.txt
cat<<a>z | grep hello<z
cat << '$USER' > out


CTRL C in heredoc
CTRL C in multiple minishells
change PWD in env
cat CTRL C exit code and general CTRL C exit code
CTRL + C with old value
cat < file1 | echo "hello world | file1 > file 2" > file2
"cat"
"<"
"file1"
"|"
"echo"
"hello world | file1 > file 2"
">"
"file2"


#Basic Pipe Commands
ls | wc
echo hello | cat
ps aux | grep bash
who | wc -l
cat /etc/passwd | grep root


#Pipes with Multiple Commands
ls -l | grep '^d' | wc -l
cat file1 | sort | uniq | wc -l
ps aux | grep httpd | awk '{print $2}'
find . -type f | xargs wc -l | sort -n
ls -la | grep '^-' | sort -k 5 -n


#Pipes with Redirection
cat input.txt | grep 'pattern' > output.txt
ls | tee file1.txt | wc -l
echo "data" | tee file1.txt file2.txt | cat -n
cat < input.txt | grep 'pattern' | sort > output.txt
grep "error" < file1.txt | sort | uniq > output.txt ********


#Pipes with Quotes and Special Characters
echo "hello | world" | cat
echo 'single | quotes' | cat
echo "|start and end|" | cat
echo 'ls | wc' | bash
echo 'ps aux | grep "httpd"' | sh


#Complex Commands with Pipes, Redirection, and Quotes
cat file1 < file2 | grep 'pattern' > output.txt
echo "pattern" | grep "pattern" | tee file.txt
ls -la | grep '^d' | sort | uniq | wc -l
cat file1.txt file2.txt | grep -v '^#' | sort | uniq > output.txt
echo "content" | cat > file1.txt | wc -l


#Edge Cases
cat file1 < file2 < file3 > file4 | grep "pattern" > file5
cat <file1 | grep "pattern" | sort | uniq | wc -l
echo "start" | tee >(grep "pattern" > file1.txt) >(sort > file2.txt)
find . -type f -name "*.c" | xargs grep -H "main" | sort > results.txt
cat <(ls | grep "^a") <(ls | grep "^b")


#Commands Mixing Pipes with Errors
ls non_existing_file | wc -l
grep "pattern" | sort | non_existing_command
cat < non_existing_file | wc -l
echo "hello" | non_existing_command
non_existing_command | grep "pattern"


# Spaces in quotes
echo "   multiple   spaces   "
echo '   multiple   spaces   '


# Special characters in quotes
echo "!@#$%^&*()_+"
echo '$PATH'
echo "$PATH"


# Escaped characters
echo \"hello\"
echo \'world\'


# Basic redirections
echo hello > out.txt
cat < in.txt
echo append >> file.txt


# Multiple redirections
echo hello > file1 > file2 > file3
cat < in1.txt < in2.txt


# Mixed redirections
cat < in.txt > out.txt
echo test > out1.txt >> out2.txt


# Redirections with spaces
echo hello >    file.txt
cat    <     file.txt
echo world   >>     file.txt


# Simple pipes
ls | grep .txt
cat file.txt | grep pattern | wc -l


# Multiple pipes
echo hello | tr a-z A-Z | rev | tr a-z A-Z
ls -l | grep "^d" | sort -r | head -n 3


# Pipes with redirections
cat < input.txt | grep pattern > output.txt
ls | grep .txt > files.txt | wc -l > count.txt


# Quoted pipes
echo "hello | world"
echo 'ls | grep test'


# Mixed quotes and pipes
echo "hello 'world'" | grep "o 'w"
echo 'hello "world"' | grep 'o "w'


# Quotes with redirections
echo "hello > world" > file.txt
echo 'test >> file' >> output.txt


# Empty/Invalid input
|
||
>>>
<<<


# Missing commands
| ls
ls |
> file.txt


# Invalid redirections
ls >
cat <
echo >>


# Multiple consecutive operators
ls ||| grep test
echo >>> file.txt
cat <<< input.txt


# Unclosed quotes
echo "hello world
echo 'testing


# Redirections and pipes with quotes
echo "test > file" > real_file.txt | cat < real_file.txt
cat < "input file.txt" | grep "pattern" > "output file.txt"


# Multiple operations
echo "hello" > f1.txt | tee f2.txt | grep "hello" > f3.txt


# Environment variables and quotes
echo "$HOME/test" > file.txt
echo "'$PATH'" | tr ':' '\n'


# Commands with special characters
echo $HOME
echo ~
echo $?


# Various whitespace
echo    hello     world
ls     -la    |    grep    test
cat    <    file.txt    >    output.txt


# Tab characters (replace spaces with tabs)
echo	hello	world
ls	-la	|	grep	test

# Long pipe chains
cat file.txt | grep pattern | sort | uniq | wc -l
ls -R / | grep bin | sort -r | head -n 5 | tee output.txt

# Mixed operations
echo "test" > file.txt | cat file.txt | grep test > output.txt | wc -l
cat < input.txt | grep "pattern" > temp.txt | sort temp.txt > final.txt
//during overnight
cat << t1 << t2 < t3 << t4 (t3 not found)
no such file or directory and all heredocs should open t1, t2 and t4
cat > t1 > t2 < t3 > t4 (t3 not found)
t3 no such file or directory and ONLY t1 and t2 hould be created (don't forget to delete the files before testing everytime)



